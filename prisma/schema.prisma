// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id            String   @id @default(uuid())
  name          String
  type          TagType
  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime @updatedAt
  createdById   String
  createdBy     User     @relation(fields: [createdById], references: [id])

  Users     User[]     @relation("UserInterestedTags")
  Questions Question[] @relation("QuestionTags")
  Papers    Paper[]    @relation("PaperTags")
}

model User {
  id            String   @id @default(uuid())
  uid           String   @unique @default(uuid())
  phoneNumber   String
  name          String?
  email         String?  @unique
  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime @updatedAt
  interested    Tag[]    @relation("UserInterestedTags")
  password      String?
  isAdmin       Boolean  @default(false)

  createdTags                 Tag[]
  createdQuestions            Question[]
  createdQuestionChoices      QuestionChoice[]
  createdPapers               Paper[]
  createdPaperQuestions       PaperQuestion[]
  createdTests                Test[]
  createdTestQuestionStatuses TestQuestionStatus[]
}

model Question {
  id             String           @id @default(uuid())
  text           String
  images         String[]
  choices        QuestionChoice[]
  isMultiCorrect Boolean
  createdAt      DateTime         @default(now())
  lastUpdatedAt  DateTime         @updatedAt
  createdById    String
  createdBy      User             @relation(fields: [createdById], references: [id])
  tags           Tag[]            @relation("QuestionTags")

  PaperQuestions PaperQuestion[]
  TestStatuses   TestQuestionStatus[]
}

model QuestionChoice {
  id            String   @id @default(uuid())
  text          String
  isAnswer      Boolean
  choiceOrder   Int
  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime @updatedAt
  createdById   String
  createdBy     User     @relation(fields: [createdById], references: [id])
  questionId    String
  question      Question @relation(fields: [questionId], references: [id])

  TestStatuses TestQuestionStatus[] @relation("TestQuestionStatusChoices")
}

model Paper {
  id            String          @id @default(uuid())
  title         String
  isModule      Boolean
  duration      Int
  createdAt     DateTime        @default(now())
  lastUpdatedAt DateTime        @updatedAt
  createdById   String
  createdBy     User            @relation(fields: [createdById], references: [id])
  tags          Tag[]           @relation("PaperTags")
  questions     PaperQuestion[]

  Tests Test[]
}

model PaperQuestion {
  id             String   @id @default(uuid())
  questionOrder  Int
  createdAt      DateTime @default(now())
  lastUpdatedAt  DateTime @updatedAt
  createdById    String
  createdBy      User     @relation(fields: [createdById], references: [id])
  paperId        String
  paper          Paper    @relation(fields: [paperId], references: [id])
  questionId     String
  question       Question @relation(fields: [questionId], references: [id])
  correctMarks   Int      @default(0)
  incorrectMarks Int      @default(0)
}

model Test {
  id               String               @id @default(uuid())
  duration         Int
  startTime        DateTime
  elapsedTime      Int
  createdAt        DateTime             @default(now())
  lastUpdatedAt    DateTime             @updatedAt
  createdById      String
  createdBy        User                 @relation(fields: [createdById], references: [id])
  paperId          String
  paper            Paper                @relation(fields: [paperId], references: [id])
  questionStatuses TestQuestionStatus[]
}

model TestQuestionStatus {
  id            String           @id @default(uuid())
  status        Status
  createdAt     DateTime         @default(now())
  lastUpdatedAt DateTime         @updatedAt
  createdById   String
  createdBy     User             @relation(fields: [createdById], references: [id])
  testId        String
  test          Test             @relation(fields: [testId], references: [id])
  questionId    String
  question      Question         @relation(fields: [questionId], references: [id])
  choices       QuestionChoice[] @relation("TestQuestionStatusChoices")
}

enum TagType {
  MODULE
  SUBJECT
  TOPIC
}

enum Status {
  UNANSWERED
  ANSWERED
  REVIEW
}
